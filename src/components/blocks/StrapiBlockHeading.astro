---
import type { StrapiBlockTextItem } from "../../types/strapi";
import Typography from "../typography/Typography.astro";
import { defaultGetHeaderTextClass, defaultGetTextContentColor } from "../../lib/utils";
type Props = {
    level: number;
    class?: string;
    data: Array<StrapiBlockTextItem>;
};

const { data, level = 2, class: classes = '' } = Astro.props;

const sanitizedData = data.filter(({ text }: StrapiBlockTextItem) => text);
const headingClasses = classes ? classes.split(' ') : [];
const headingTag = `h${level}`;
---

{
    sanitizedData.length && (
        <>
            {sanitizedData.map(({ text }: StrapiBlockTextItem) => {
                switch (level) {
                    case 2:
                        return (
                            <Typography
                                tag="h2"
                                variant="header"
                                size="large"
                                class="mt-20 mb-6 sm:max-md:mt-6"
                                getHeaderTextClass={getHeaderTextClass}
                                getTextContentColor={getTextContentColor}
                            >
                                {text}
                            </Typography>
                        );
                    case 3:
                        return (
                            <Typography
                                tag="h3"
                                variant="header"
                                size="medium"
                                class="my-6"
                                getHeaderTextClass={getHeaderTextClass}
                                getTextContentColor={getTextContentColor}
                            >
                                {text}
                            </Typography>
                        );
                    case 4:
                        return (
                            <Typography
                                tag="h4"
                                variant="header"
                                size="medium"
                                getHeaderTextClass={getHeaderTextClass}
                                getTextContentColor={getTextContentColor}
                            >
                                {text}
                            </Typography>
                        );
                    case 5:
                        return (
                            <Typography
                                tag="h6"
                                variant="header"
                                size="base"
                                getHeaderTextClass={getHeaderTextClass}
                                getTextContentColor={getTextContentColor}
                            >
                                {text}
                            </Typography>
                        );
                    default:
                        return (
                            <Typography
                                tag="h2"
                                class="mt-20 mb-6 sm:max-md:mt-6"
                                variant="header"
                                size="xLarge"
                                getHeaderTextClass={getHeaderTextClass}
                                getTextContentColor={getTextContentColor}
                            >
                                {text}
                            </Typography>
                        );
                }
            })}
        </>
    )
}
