---
import StrapiBlockHeading from './blocks/StrapiBlockHeading.astro';
import StrapiBlockList from './blocks/StrapiBlockList.astro';
import StrapiBlockParagraph from './blocks/StrapiBlockParagraph.astro';
import StrapiBlockCode from './blocks/StrapiBlockCode.astro';
import StrapiBlockImage from './blocks/StrapiBlockImage.astro';

import { StrapiBlockThemeDefault, buildThemeObject, renderPropertyClasses } from '../lib/theme';
import type { StrapiBlockField, StrapiBlock, StrapiBlockTheme, StrapiBlockUserTheme } from '../types';

type Props = {
    class?: string;
    theme?: StrapiBlockUserTheme;
    data: StrapiBlockField;
}

const { data, class: classes, theme } = Astro.props;

const themeObject: StrapiBlockTheme = theme ? buildThemeObject(theme, StrapiBlockThemeDefault) : StrapiBlockThemeDefault;


---

<div class={classes}>
    { data.map((block: StrapiBlock) => {
        switch(block.type) {
            case "heading":
                return (<StrapiBlockHeading 
                    class={renderPropertyClasses(themeObject, ['heading', 'block'])} 
                    data={block.children} 
                    level={block.level}
                    theme={themeObject}
                />);
            case "paragraph":
                return (<StrapiBlockParagraph 
                    class={renderPropertyClasses(themeObject, ['paragraph', 'block'])} 
                    data={block.children} 
                    theme={themeObject}
                />);
            case "quote":
                return (<StrapiBlockParagraph 
                    class={renderPropertyClasses(themeObject, ['quote', 'block'])} 
                    data={block.children} 
                    theme={themeObject}
                />);
            case "list":
                return (<StrapiBlockList 
                    class={renderPropertyClasses(themeObject, ['list', 'block'])} 
                    data={block.children} 
                    format={block.format} 
                    theme={themeObject}
                />);
            case "code":
                return (<StrapiBlockCode 
                    class={renderPropertyClasses(themeObject, ['code', 'block'])} 
                    data={block.children} 
                    language={block.language} 
                    theme={themeObject}
                />);
            case "image":
                return (<StrapiBlockImage 
                    class={renderPropertyClasses(themeObject, ['image', 'block'])} 
                    data={block.image} 
                    format={block.format} 
                    children={block.children} 
                    theme={themeObject}
                />);
            default:
                return '';
        }
    })
    }
</div>