---
import type { StrapiBlockField, StrapiBlock, StrapiBlockClassExtension } from '../types/strapi';
import StrapiBlockHeading from './blocks/StrapiBlockHeading.astro';
import StrapiBlockList from './blocks/StrapiBlockList.astro';
import StrapiBlockParagraph from './blocks/StrapiBlockParagraph.astro';
import { defaultGetTextContentColor, defaultGetHeaderTextClass, defaultGetBodyTextClass } from '../lib/utils';
type Props<FontColors extends string> = {
    class?: string;
    color?: FontColors;
    blockClass?: StrapiBlockClassExtension;
    data: StrapiBlockField;
    getTextContentColor?: (color: string) => string;
    getHeaderTextClass?: (size: string, isSubtle?: boolean) => string;
    getBodyTextClass?: (size: string, isSubtle?: boolean) => string;
}

const { data, class: classes, blockClass, color = "primary", getTextContentColor = defaultGetTextContentColor, getHeaderTextClass = defaultGetHeaderTextClass, getBodyTextClass = defaultGetBodyTextClass } = Astro.props;

---

<div class={classes}>
    { data.map((block: StrapiBlock) => {
        switch(block.type) {
            case "heading":
                return (<StrapiBlockHeading data={block.children} level={block.level} />);
            case "paragraph":
                return (<StrapiBlockParagraph 
                    class={typeof blockClass?.paragraph === 'string' ? blockClass.paragraph : blockClass?.paragraph?.master} 
                    blockClass={typeof blockClass?.paragraph === 'string' ? undefined : blockClass?.paragraph} 
                    data={block.children} 
                    color={color} 
                    getTextContentColor={getTextContentColor}
                />);
            case "list":
                return (<StrapiBlockList class={blockClass?.list} data={block.children} format={block.format} color={color} />);
            default:
                return '';
        }
    })
    }
</div>